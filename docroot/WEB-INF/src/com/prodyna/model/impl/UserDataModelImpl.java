/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.prodyna.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.prodyna.model.UserData;
import com.prodyna.model.UserDataModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the UserData service. Represents a row in the &quot;CUD_UserData&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.prodyna.model.UserDataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserDataImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UserDataImpl
 * @see com.prodyna.model.UserData
 * @see com.prodyna.model.UserDataModel
 * @generated
 */
public class UserDataModelImpl extends BaseModelImpl<UserData>
	implements UserDataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user data model instance should use the {@link com.prodyna.model.UserData} interface instead.
	 */
	public static final String TABLE_NAME = "CUD_UserData";
	public static final Object[][] TABLE_COLUMNS = {
			{ "userDataId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "creationDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "t_ShirtSize", Types.VARCHAR },
			{ "dateOfBirth", Types.TIMESTAMP },
			{ "glasses", Types.BOOLEAN },
			{ "coffeesPerDay", Types.INTEGER },
			{ "heightCm", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table CUD_UserData (userDataId LONG not null primary key,companyId LONG,userId LONG,creationDate DATE null,modifiedDate DATE null,t_ShirtSize VARCHAR(75) null,dateOfBirth DATE null,glasses BOOLEAN,coffeesPerDay INTEGER,heightCm INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table CUD_UserData";
	public static final String ORDER_BY_JPQL = " ORDER BY userData.userDataId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CUD_UserData.userDataId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.prodyna.model.UserData"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.prodyna.model.UserData"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.prodyna.model.UserData"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static long USERDATAID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.prodyna.model.UserData"));

	public UserDataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _userDataId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUserDataId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userDataId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserData.class;
	}

	@Override
	public String getModelClassName() {
		return UserData.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("userDataId", getUserDataId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("creationDate", getCreationDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("t_ShirtSize", getT_ShirtSize());
		attributes.put("dateOfBirth", getDateOfBirth());
		attributes.put("glasses", getGlasses());
		attributes.put("coffeesPerDay", getCoffeesPerDay());
		attributes.put("heightCm", getHeightCm());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long userDataId = (Long)attributes.get("userDataId");

		if (userDataId != null) {
			setUserDataId(userDataId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date creationDate = (Date)attributes.get("creationDate");

		if (creationDate != null) {
			setCreationDate(creationDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String t_ShirtSize = (String)attributes.get("t_ShirtSize");

		if (t_ShirtSize != null) {
			setT_ShirtSize(t_ShirtSize);
		}

		Date dateOfBirth = (Date)attributes.get("dateOfBirth");

		if (dateOfBirth != null) {
			setDateOfBirth(dateOfBirth);
		}

		Boolean glasses = (Boolean)attributes.get("glasses");

		if (glasses != null) {
			setGlasses(glasses);
		}

		Integer coffeesPerDay = (Integer)attributes.get("coffeesPerDay");

		if (coffeesPerDay != null) {
			setCoffeesPerDay(coffeesPerDay);
		}

		Integer heightCm = (Integer)attributes.get("heightCm");

		if (heightCm != null) {
			setHeightCm(heightCm);
		}
	}

	@Override
	public long getUserDataId() {
		return _userDataId;
	}

	@Override
	public void setUserDataId(long userDataId) {
		_columnBitmask = -1L;

		_userDataId = userDataId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public Date getCreationDate() {
		return _creationDate;
	}

	@Override
	public void setCreationDate(Date creationDate) {
		_creationDate = creationDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getT_ShirtSize() {
		if (_t_ShirtSize == null) {
			return StringPool.BLANK;
		}
		else {
			return _t_ShirtSize;
		}
	}

	@Override
	public void setT_ShirtSize(String t_ShirtSize) {
		_t_ShirtSize = t_ShirtSize;
	}

	@Override
	public Date getDateOfBirth() {
		return _dateOfBirth;
	}

	@Override
	public void setDateOfBirth(Date dateOfBirth) {
		_dateOfBirth = dateOfBirth;
	}

	@Override
	public boolean getGlasses() {
		return _glasses;
	}

	@Override
	public boolean isGlasses() {
		return _glasses;
	}

	@Override
	public void setGlasses(boolean glasses) {
		_glasses = glasses;
	}

	@Override
	public int getCoffeesPerDay() {
		return _coffeesPerDay;
	}

	@Override
	public void setCoffeesPerDay(int coffeesPerDay) {
		_coffeesPerDay = coffeesPerDay;
	}

	@Override
	public int getHeightCm() {
		return _heightCm;
	}

	@Override
	public void setHeightCm(int heightCm) {
		_heightCm = heightCm;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			UserData.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserData toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UserData)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserDataImpl userDataImpl = new UserDataImpl();

		userDataImpl.setUserDataId(getUserDataId());
		userDataImpl.setCompanyId(getCompanyId());
		userDataImpl.setUserId(getUserId());
		userDataImpl.setCreationDate(getCreationDate());
		userDataImpl.setModifiedDate(getModifiedDate());
		userDataImpl.setT_ShirtSize(getT_ShirtSize());
		userDataImpl.setDateOfBirth(getDateOfBirth());
		userDataImpl.setGlasses(getGlasses());
		userDataImpl.setCoffeesPerDay(getCoffeesPerDay());
		userDataImpl.setHeightCm(getHeightCm());

		userDataImpl.resetOriginalValues();

		return userDataImpl;
	}

	@Override
	public int compareTo(UserData userData) {
		int value = 0;

		if (getUserDataId() < userData.getUserDataId()) {
			value = -1;
		}
		else if (getUserDataId() > userData.getUserDataId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserData)) {
			return false;
		}

		UserData userData = (UserData)obj;

		long primaryKey = userData.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		UserDataModelImpl userDataModelImpl = this;

		userDataModelImpl._originalCompanyId = userDataModelImpl._companyId;

		userDataModelImpl._setOriginalCompanyId = false;

		userDataModelImpl._originalUserId = userDataModelImpl._userId;

		userDataModelImpl._setOriginalUserId = false;

		userDataModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserData> toCacheModel() {
		UserDataCacheModel userDataCacheModel = new UserDataCacheModel();

		userDataCacheModel.userDataId = getUserDataId();

		userDataCacheModel.companyId = getCompanyId();

		userDataCacheModel.userId = getUserId();

		Date creationDate = getCreationDate();

		if (creationDate != null) {
			userDataCacheModel.creationDate = creationDate.getTime();
		}
		else {
			userDataCacheModel.creationDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			userDataCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			userDataCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		userDataCacheModel.t_ShirtSize = getT_ShirtSize();

		String t_ShirtSize = userDataCacheModel.t_ShirtSize;

		if ((t_ShirtSize != null) && (t_ShirtSize.length() == 0)) {
			userDataCacheModel.t_ShirtSize = null;
		}

		Date dateOfBirth = getDateOfBirth();

		if (dateOfBirth != null) {
			userDataCacheModel.dateOfBirth = dateOfBirth.getTime();
		}
		else {
			userDataCacheModel.dateOfBirth = Long.MIN_VALUE;
		}

		userDataCacheModel.glasses = getGlasses();

		userDataCacheModel.coffeesPerDay = getCoffeesPerDay();

		userDataCacheModel.heightCm = getHeightCm();

		return userDataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{userDataId=");
		sb.append(getUserDataId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", creationDate=");
		sb.append(getCreationDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", t_ShirtSize=");
		sb.append(getT_ShirtSize());
		sb.append(", dateOfBirth=");
		sb.append(getDateOfBirth());
		sb.append(", glasses=");
		sb.append(getGlasses());
		sb.append(", coffeesPerDay=");
		sb.append(getCoffeesPerDay());
		sb.append(", heightCm=");
		sb.append(getHeightCm());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.prodyna.model.UserData");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>userDataId</column-name><column-value><![CDATA[");
		sb.append(getUserDataId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creationDate</column-name><column-value><![CDATA[");
		sb.append(getCreationDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>t_ShirtSize</column-name><column-value><![CDATA[");
		sb.append(getT_ShirtSize());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateOfBirth</column-name><column-value><![CDATA[");
		sb.append(getDateOfBirth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>glasses</column-name><column-value><![CDATA[");
		sb.append(getGlasses());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>coffeesPerDay</column-name><column-value><![CDATA[");
		sb.append(getCoffeesPerDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>heightCm</column-name><column-value><![CDATA[");
		sb.append(getHeightCm());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = UserData.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			UserData.class
		};
	private long _userDataId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private Date _creationDate;
	private Date _modifiedDate;
	private String _t_ShirtSize;
	private Date _dateOfBirth;
	private boolean _glasses;
	private int _coffeesPerDay;
	private int _heightCm;
	private long _columnBitmask;
	private UserData _escapedModel;
}